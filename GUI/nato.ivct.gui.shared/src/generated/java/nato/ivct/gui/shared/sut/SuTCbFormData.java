package nato.ivct.gui.shared.sut;

import javax.annotation.Generated;

import org.eclipse.scout.rt.shared.data.basic.table.AbstractTableRowData;
import org.eclipse.scout.rt.shared.data.form.AbstractFormData;
import org.eclipse.scout.rt.shared.data.form.fields.AbstractValueFieldData;
import org.eclipse.scout.rt.shared.data.form.fields.tablefield.AbstractTableFieldBeanData;
import org.eclipse.scout.rt.shared.data.form.properties.AbstractPropertyData;

/**
 * <b>NOTE:</b><br>
 * This class is auto generated by the Scout SDK. No manual modifications
 * recommended.
 */
@Generated(value = "nato.ivct.gui.client.sut.SuTCbForm", comments = "This class is auto generated by the Scout SDK. No manual modifications recommended.")
public class SuTCbFormData extends AbstractFormData {

	private static final long serialVersionUID = 1L;

	public CbDescription getCbDescription() {
		return getFieldByClass(CbDescription.class);
	}

	/**
	 * access method for property CbId.
	 */
	public String getCbId() {
		return getCbIdProperty().getValue();
	}

	/**
	 * access method for property CbId.
	 */
	public void setCbId(String cbId) {
		getCbIdProperty().setValue(cbId);
	}

	public CbIdProperty getCbIdProperty() {
		return getPropertyByClass(CbIdProperty.class);
	}

	public CbName getCbName() {
		return getFieldByClass(CbName.class);
	}

	public CbRequirementsTable getCbRequirementsTable() {
		return getFieldByClass(CbRequirementsTable.class);
	}

	public SuTCbParameterTable getSuTCbParameterTable() {
		return getFieldByClass(SuTCbParameterTable.class);
	}

	/**
	 * access method for property SutId.
	 */
	public String getSutId() {
		return getSutIdProperty().getValue();
	}

	/**
	 * access method for property SutId.
	 */
	public void setSutId(String sutId) {
		getSutIdProperty().setValue(sutId);
	}

	public SutIdProperty getSutIdProperty() {
		return getPropertyByClass(SutIdProperty.class);
	}

	public static class CbDescription extends AbstractValueFieldData<String> {

		private static final long serialVersionUID = 1L;
	}

	public static class CbIdProperty extends AbstractPropertyData<String> {

		private static final long serialVersionUID = 1L;
	}

	public static class CbName extends AbstractValueFieldData<String> {

		private static final long serialVersionUID = 1L;
	}

	public static class CbRequirementsTable extends AbstractTableFieldBeanData {

		private static final long serialVersionUID = 1L;

		@Override
		public CbRequirementsTableRowData addRow() {
			return (CbRequirementsTableRowData) super.addRow();
		}

		@Override
		public CbRequirementsTableRowData addRow(int rowState) {
			return (CbRequirementsTableRowData) super.addRow(rowState);
		}

		@Override
		public CbRequirementsTableRowData createRow() {
			return new CbRequirementsTableRowData();
		}

		@Override
		public Class<? extends AbstractTableRowData> getRowType() {
			return CbRequirementsTableRowData.class;
		}

		@Override
		public CbRequirementsTableRowData[] getRows() {
			return (CbRequirementsTableRowData[]) super.getRows();
		}

		@Override
		public CbRequirementsTableRowData rowAt(int index) {
			return (CbRequirementsTableRowData) super.rowAt(index);
		}

		public void setRows(CbRequirementsTableRowData[] rows) {
			super.setRows(rows);
		}

		public static class CbRequirementsTableRowData extends AbstractTableRowData {

			private static final long serialVersionUID = 1L;
			public static final String requirementId = "requirementId";
			public static final String requirementDesc = "requirementDesc";
			public static final String abstractTC = "abstractTC";
			private String m_requirementId;
			private String m_requirementDesc;
			private String m_abstractTC;

			public String getRequirementId() {
				return m_requirementId;
			}

			public void setRequirementId(String newRequirementId) {
				m_requirementId = newRequirementId;
			}

			public String getRequirementDesc() {
				return m_requirementDesc;
			}

			public void setRequirementDesc(String newRequirementDesc) {
				m_requirementDesc = newRequirementDesc;
			}

			public String getAbstractTC() {
				return m_abstractTC;
			}

			public void setAbstractTC(String newAbstractTC) {
				m_abstractTC = newAbstractTC;
			}
		}
	}

	public static class SuTCbParameterTable extends AbstractTableFieldBeanData {

		private static final long serialVersionUID = 1L;

		@Override
		public SuTCbParameterTableRowData addRow() {
			return (SuTCbParameterTableRowData) super.addRow();
		}

		@Override
		public SuTCbParameterTableRowData addRow(int rowState) {
			return (SuTCbParameterTableRowData) super.addRow(rowState);
		}

		@Override
		public SuTCbParameterTableRowData createRow() {
			return new SuTCbParameterTableRowData();
		}

		@Override
		public Class<? extends AbstractTableRowData> getRowType() {
			return SuTCbParameterTableRowData.class;
		}

		@Override
		public SuTCbParameterTableRowData[] getRows() {
			return (SuTCbParameterTableRowData[]) super.getRows();
		}

		@Override
		public SuTCbParameterTableRowData rowAt(int index) {
			return (SuTCbParameterTableRowData) super.rowAt(index);
		}

		public void setRows(SuTCbParameterTableRowData[] rows) {
			super.setRows(rows);
		}

		public static class SuTCbParameterTableRowData extends AbstractTableRowData {

			private static final long serialVersionUID = 1L;
			public static final String parameterName = "parameterName";
			public static final String parameterValue = "parameterValue";
			private String m_parameterName;
			private String m_parameterValue;

			public String getParameterName() {
				return m_parameterName;
			}

			public void setParameterName(String newParameterName) {
				m_parameterName = newParameterName;
			}

			public String getParameterValue() {
				return m_parameterValue;
			}

			public void setParameterValue(String newParameterValue) {
				m_parameterValue = newParameterValue;
			}
		}
	}

	public static class SutIdProperty extends AbstractPropertyData<String> {

		private static final long serialVersionUID = 1L;
	}
}
