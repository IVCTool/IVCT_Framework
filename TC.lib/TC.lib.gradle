plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

java {
    withJavadocJar()
    withSourcesJar()
}

group = 'io.github.msg134'
archivesBaseName = "TC.lib"
version = ivctVersion

dependencies {
    compileOnlyApi project(':IEEE1516e')
    api project(':TC.lib.if')
	api libraries.slf4j_api
	implementation libraries.jsonSimple

	testImplementation libraries.slf4j_api
    testImplementation libraries.junit_jupiter_engine
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'TC.lib'
            from components.java

            pom {
                name = "IVCT Test Case Library"
                description = "Library to be used by IVCT test case developers"
                url = "https://github.com/MSG134/IVCT_Framework/tree/master/TC.lib"
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        id = "rhzg"
                        name = "Reinhard Herzog"
                        email = "reinhard.herzog@iosb.fraunhofer.de"
                    }
                }
                scm {
                    connection = "scm:git:https://github.com/MSG134/IVCT_Framework/tree/development/TC.lib.git"
                    developerConnection = "scm:git:https://github.com/MSG134/IVCT_Framework/tree/development/TC.lib-git"
                    url = "https://github.com/MSG134/IVCT_Framework/tree/development/TC.lib"
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}

signing
{
    sign publishing.publications.mavenJava
}

gradle.taskGraph.whenReady { taskGraph ->
    // Do not sign archives by default (a local build without gpg keyring should succeed)
    if (taskGraph.allTasks.any {  it.name == 'install' || it.name == 'build' || it.name == 'assemble' }) {
        tasks.findAll { it.name == 'signArchives' || it.name == 'signDocsJar' || it.name == 'signTestJar' || it.name == 'signSourcesJar' }.each { task ->
            task.enabled = false
        }
    }
}
