apply plugin: 'application'

mainClassName = 'de.fraunhofer.iosb.testrunner.JMSTestRunner'

dependencies {
	compile     project(':Command')
	compile     project(':TC.lib')

	compile     libraries.slf4j_api
	compile     libraries.jsonSimple

	runtime		libraries.actimemqClient
	runtime		libraries.logback_classic
	runtime		libraries.logback_core

	runtime     libraries.slf4j_jcl_over_slf4j
	runtime     libraries.slf4j_jul_to_slf4j
	runtime     libraries.slf4j_log4j_over_slf4j

    switch (rti) {
		case "prti1516e":
			compileOnly files (rti_lib + "/" + rti_jar)
			compileOnly fileTree (dir: rti_lib, include: '*.jar')
			break
		case "mak":
			logger.warn (':TC:MAK RTI is not configured. HelloWorld will not be runnable')
			compileOnly     group: 'msg134-ivct-framework', name: 'IEEE1516e', version: ivctVersion
			break
		case "IEEE1516e":
		default:
			logger.warn (':TC:No RTI is used. Test Engine will not be able to run test cases')
			compileOnly     group: 'msg134-ivct-framework', name: 'IEEE1516e', version: ivctVersion
	}
}
distributions {
    main {
        contents {
            from('src/conf/TC.execPitch.bat') {
                into 'bin'
            }
            from('src/conf/TC.execPitch') {
                into 'bin'
            }
            from('src/conf/TC.execMAK.bat') {
                into 'bin'
            }
            from('src/conf/TC.execMAK') {
                into 'bin'
            }
            from('src/conf/JMSTestRunner_logback.xml') {
                into 'lib'
            }
        }
    }
}

tasks.withType(CreateStartScripts) {
	/*
	 * Want to have the lib folder (for the logback xml file) included in classpath,
	 * but gradle makes lib/lib out of that.
	 * Thus need to edit the script to only have a single lib level.
	 * A second piece of logic is that separate scripts are made for the various RTIs
	 * using the standard environment variables for each RTI. A script is needed for
	 * each of UNIX and Windows for each RTI.
	 */
    classpath += files('lib')
doLast {
		/*
		* Get the default scripts from the gradle task.
		*/
        def windowsScriptFile = file getWindowsScript()
        def unixScriptFile = file getUnixScript()

		windowsScriptFile.text = windowsScriptFile.text.replace('%APP_HOME%\\lib\\lib', '%APP_HOME%\\lib;%LRC_CLASSPATH%')
		unixScriptFile.text = unixScriptFile.text.replace('$APP_HOME/lib/lib', '$APP_HOME/lib;$LRC_CLASSPATH')
    }
}
