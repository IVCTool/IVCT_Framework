// Plugins used for TC.exec
plugins {
    // using the Java core Application plugin
    id 'application'
    // using JIB Container Support for Java applications
    id 'com.google.cloud.tools.jib' version '3.1.2'
}

mainClassName = 'de.fraunhofer.iosb.testrunner.TestEngine'

// setup the common jib configuration
task jibApplication () {
    doFirst {
        jib {
            container {
                entrypoint = 'INHERIT'
                creationTime = 'USE_CURRENT_TIMESTAMP'
                environment = ['LRC_ENTRYPOINT': '/root/application/start.sh']
                mainClass = "de.fraunhofer.iosb.testrunner.TestEngine"
            }
            extraDirectories {
                paths {
                    path {
                        from = file('docker')
                        into = '/root/application'
                    }
                    path {
                        from = file('src/main/resources')
                        into = '/root/application'
                    }
                }
                permissions = ['/root/application/start.sh': '755']
            }
        }
    }
    dependsOn 'distTar'
}

task jibPitch (type: com.google.cloud.tools.jib.gradle.BuildDockerTask) {
    group = 'Docker'
    description = 'Creates images for the Pitch RTI'
    jibExtension = project.extensions.getByName('jib')
    dependsOn jibApplication
    doFirst {
        jib {
            from {
                image = 'hlacontainers/lrc:pitch-skeleton-alpine'
            }
            to {
                image = "ivct/tc-runner:pi-skeleton-${ivctVersion}"
            }
        }
    }
}

task jibPortico (type: com.google.cloud.tools.jib.gradle.BuildDockerTask) {
    group = 'Docker'
    description = 'Creates images for the Portico RTI'
    jibExtension = project.extensions.getByName('jib')
    dependsOn jibApplication
    doFirst {
        jib {
            from {
                image = 'hlacontainers/lrc:portico-nightly-2016.05.28-alpine'
            }
            to {
                image = "ivct/tc-runner:po-${ivctVersion}"
            }
        }
    }
}

task jibMak (type: com.google.cloud.tools.jib.gradle.BuildDockerTask) {
    group = 'Docker'
    description = 'Creates images for the Mak RTI'
    jibExtension = project.extensions.getByName('jib')
    dependsOn jibApplication
    doFirst {
        jib {
            from {
                image = 'hlacontainers/lrc:vtmak-4.5f-centos7'
            }
            to {
                image = "ivct/tc-runner:ma-${ivctVersion}"
            }
        }
    }
}

tasks.register ("dockerBuildImage") {
    group = 'Docker'
    description = 'Creates docker images for RTIs'
    dependsOn 'jibPitch'
    dependsOn 'jibPortico'
    dependsOn 'jibMak'
}

dependencies {
	// local project dependencies
    implementation project(':Command')
    implementation project(':MessagingHelpers')
	implementation project(':TC.lib.if')
    
	// external project dependencies
	implementation libraries.slf4j_api
	implementation libraries.jsonSimple
	implementation libraries.actimemqClient
	implementation libraries.logback_classic
	implementation libraries.logback_core
    // include explicit dependency to local RTI installation only for debugging
    // implementation files('C:/MAK/makRti4.6/lib/hla.jar')
    // implementation files('C:\\Program Files\\prti1516e\\lib\\prti.jar')

    // JAX-B dependencies for JDK 9+
    // implementation "jakarta.xml.bind:jakarta.xml.bind-api:2.3.2"
    // implementation "org.glassfish.jaxb:jaxb-runtime:2.3.2"
}

distributions {
    main {
        contents {
            from('src/conf/TestEngine_logback.xml') {
                into 'lib'
            }
        }
    }
}

tasks.withType(CreateStartScripts) {
    classpath += files('lib')
    doLast {
		/*
		* Get the default scripts from the gradle task.
		*/
        def windowsScriptFile = file getWindowsScript()
        def unixScriptFile = file getUnixScript()
        /*
        * Want to have the lib folder (for the logback xml file) included in classpath,
        * but gradle makes lib/lib out of that.
        * Thus need to edit the script to only have a single lib level.
        */
        windowsScriptFile.text = windowsScriptFile.text.replace('%APP_HOME%\\lib\\lib', '%APP_HOME%\\lib;%LRC_CLASSPATH%')
        unixScriptFile.text = unixScriptFile.text.replace('$APP_HOME/lib/lib', '$APP_HOME/lib:$LRC_CLASSPATH')
    }
}

// write Information about compatible Versions from libraries.gradle to a file
task writeCompatibleVersions {
  group = "Build"
  description = "Creates a file with information of compability"

  doLast {
    def prop = new Properties()
    compatibleVersions.each { key, value -> prop."$key" = "$value".toString() }
    mkdir "src/main/resources"
    File compFile = file('src/main/resources/compatibleVersions.properties')
    prop.store(compFile.newWriter(), null)
  }
}
processResources.dependsOn  writeCompatibleVersions
