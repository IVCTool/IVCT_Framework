// -----------------------------------------------------------------------------
// Docker
// -----------------------------------------------------------------------------
buildscript {
    repositories {
		mavenLocal()
		mavenCentral()
	}
  dependencies {
	classpath libraries.docker
  }
}

// Plugins used for TC.exec
plugins {
    id 'application'
}

// def runDockerBuild(String target) {
//     exec {
//         executable "docker"
//         // args "build", "-f ${target} --build-arg version=${ivctVersion} -t ivct/tc-runner:pi-${ivctVersion} ."
//         // args "build", '-f Dockerfile-pi --build-arg version=2.1.1 -t ivct/tc-runner:pi-2.1.1 .'
//         commandLine 'docker', 'build', "-f ${target} --build-arg version=$ivctVersion -t ivct/logsink:pi-$ivctVersion ."
//     }
// }

// docker plugin
apply plugin: com.bmuschko.gradle.docker.DockerRemoteApiPlugin

// import remote API plugin task groups
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage

task dockerBuildPitchImage(type: DockerBuildImage) {
    dependsOn 'install'
	group = 'Docker'
	description = 'Builds the tc-runner docker image for Pitch'
    dockerFile = project.file('Dockerfile-pi')
    buildArgs.put('version', "${ivctVersion}")
	inputDir = file('.')
	tags.add ("ivct/tc-runner:pi-bare-${ivctVersion}")
}

task dockerBuildPorticoImage(type: DockerBuildImage) {
    dependsOn 'install'
	group = 'Docker'
	description = 'Builds the tc-runner docker image for Portico'
    dockerFile = project.file('Dockerfile-po')
    buildArgs.put('version', "${ivctVersion}")
	inputDir = file('.')
	tags.add ("ivct/tc-runner:po-${ivctVersion}")
}

task dockerBuildMakImage(type: DockerBuildImage) {
    dependsOn 'install'
	group = 'Docker'
	description = 'Builds the tc-runner docker image for MaK'
    dockerFile = project.file('Dockerfile-ma')
    buildArgs.put('version', "${ivctVersion}")
	inputDir = file('.')
	tags.add ("ivct/tc-runner:ma-${ivctVersion}")
}

tasks.register ("dockerBuildImage") {
    group = 'Docker'
    description = 'Creates docker images for RTIs'
    dependsOn 'dockerBuildPitchImage'
    dependsOn 'dockerBuildPorticoImage'
    // dependsOn 'dockerBuildMakImage'
}

mainClassName = 'de.fraunhofer.iosb.testrunner.TestEngine'

dependencies {
    compile     project(':Command')
	compile     project(':TC.lib')

	compile     libraries.slf4j_api
	compile     libraries.jsonSimple

	runtime		libraries.actimemqClient
	runtime		libraries.logback_classic
	runtime		libraries.logback_core

	// compileOnly     group: 'io.github.msg134', name: 'IEEE1516e', version: ivctVersion
}
distributions {
    main {
        contents {
            from('src/conf/TestEngine_logback.xml') {
                into 'lib'
            }
        }
    }
}

tasks.withType(CreateStartScripts) {
    classpath += files('lib')
doLast {
		/*
		* Get the default scripts from the gradle task.
		*/
        def windowsScriptFile = file getWindowsScript()
        def unixScriptFile = file getUnixScript()
        /*
        * Want to have the lib folder (for the logback xml file) included in classpath,
        * but gradle makes lib/lib out of that.
        * Thus need to edit the script to only have a single lib level.
        */
        windowsScriptFile.text = windowsScriptFile.text.replace('%APP_HOME%\\lib\\lib', '%APP_HOME%\\lib;%LRC_CLASSPATH%')
        unixScriptFile.text = unixScriptFile.text.replace('$APP_HOME/lib/lib', '$APP_HOME/lib:$LRC_CLASSPATH')
    }
}

// write Information about compatible Versions from libraries.gradle to a file
task writeCompatibleVersions {
  group = "Build"
  description = "Creates a file with information of compability"

  doLast {
    def prop = new Properties()
    compatibleVersions.each { key, value -> prop."$key" = "$value".toString() }
    mkdir "src/main/resources"
    File compFile = file('src/main/resources/compatibleVersions.properties')
    prop.store(compFile.newWriter(), null)
  }
}
processResources.dependsOn  writeCompatibleVersions
