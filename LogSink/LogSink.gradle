apply plugin: 'application'

// -----------------------------------------------------------------------------
// Docker
// -----------------------------------------------------------------------------
buildscript {
    repositories {
        mavenLocal()
		mavenCentral()
    }
    dependencies {
        classpath libraries.docker
    }
}
apply plugin: 'com.bmuschko.docker-java-application'

mainClassName = 'de.fraunhofer.iosb.ivct.logsink.LogSink'


docker {
    javaApplication {
        baseImage = 'openjdk:8-jre-alpine'
        maintainer = 'Reinhard Herzog "reinhard.herzog@iosb.fraunhofer.de"'
        tag = "ivct/logsink:${ivctVersion}"
    }
}


dependencies {
	compile     project(':Command')
	compile 	libraries.actimemqClient
	compile 	libraries.logback_classic
	compile     libraries.slf4j_api
	compile		libraries.jsonSimple
	compile		libraries.jsonIo

    compile		libraries.logback_classic
    compile		libraries.logback_core
    compile     libraries.logback_contrib
    compile     libraries.logback_json_classic

    runtime		libraries.logback_classic
    runtime		libraries.logback_core
    runtime     libraries.logback_contrib
    runtime     libraries.logback_json_classic
}

distributions {
    main {
        contents {
            from('src/conf/logback.xml') {
                into 'lib'
            }
        }
    }
}

tasks.withType(CreateStartScripts) {
    classpath += files('lib')
doLast {
        def windowsScriptFile = file getWindowsScript()
        def unixScriptFile = file getUnixScript()
        windowsScriptFile.text = windowsScriptFile.text.replace('%APP_HOME%\\lib\\lib', '%APP_HOME%\\lib')
        unixScriptFile.text = unixScriptFile.text.replace('$APP_HOME/lib/lib', '$APP_HOME/lib')
    }}
